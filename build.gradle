buildscript {
    repositories {
        mavenCentral()
        jcenter()
        //maven {
        //  name = "forge"
        //  url = "https://files.minecraftforge.net/maven"
        //}
        maven {
            name = "gt"
            url = "https://gregtech.overminddl1.com/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }
}

apply plugin: 'eclipse'
eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

def eclipseRuntimeClasspath = ""
def eclipseRuntimeClasspathTemplate = "<listEntry value=\"&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry externalArchive=&quot;@@PATH@@&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;\"/>\n"

task eclipseForgeWorkspace(type: Copy) {
    doFirst {
        sourceSets.main.runtimeClasspath.collect {
            eclipseRuntimeClasspath += eclipseRuntimeClasspathTemplate.replaceAll('@@PATH@@', it.toString())
            ""
        }
    }
    from(".meta/eclipse/.metadata") {
        include '**/*.template'
        rename { it.replace '.template', '' }
        filter { it.replaceAll('@@eclipseRuntimeClasspath@@', eclipseRuntimeClasspath) }
        //rename '(.*).template', '$1'
    }
    from(".meta/eclipse/.metadata") {
        exclude '**/*.launch'
    }
    into "eclipse/.metadata"
}

import org.apache.tools.ant.taskdefs.condition.Os
task eclipseForgeProject {
    doLast {
        if(!(new File("eclipse/Minecraft")).exists()) {
            if(!Os.isFamily(Os.FAMILY_WINDOWS)) {
                ant.symlink(resource: "../", link: "eclipse/Minecraft")
            } else {
                println("WINDOWS: Before loading this workspace with Eclipse, manually run this in an Elevated/Admin command prompt:")
                println("mklink /D " + (new File("").absolutePath) + "/eclipse/Minecraft " + (new File("").absolutePath))
            }
        }
    }
}
eclipseForgeProject.dependsOn(eclipseForgeWorkspace)

tasks.eclipse.dependsOn(eclipseForgeProject)

apply plugin: 'idea'
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    maven {
        name = "gt"
        url = "https://gregtech.overminddl1.com/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

apply plugin: 'forge'

version = "1.7.10-0.13.0"
group= "com.celestek.hexcraft"
archivesBaseName = "HEXCraft"

sourceCompatibility = 1.7
targetCompatibility = 1.7
compileJava.options.bootClasspath = org.gradle.internal.jvm.Jvm.current().getJre().getHomeDir().toString() +"/lib/rt.jar"
compileJava {
    options.encoding = "UTF-8"
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "instance"
}

dependencies {
    compileOnly "team.chisel:Chisel:2.9.5.12:deobf"
    compileOnly "codechicken:ForgeMultipart:1.7.10-1.2.0.347:dev"
    compileOnly "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
    compileOnly "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
    compileOnly "ic2:IC2Classic:1.2.1.8:dev"
    compileOnly "coloredlightscore:ColoredLightsCore:1.3.7.d524c02:deobf"
    compileOnly "com.gregoriust.gregtech:gregtech_1.7.10:6.13.01:dev"
//    compileOnly "com.gregoriust.gregtech:gregtech_1.7.10:SNAPSHOT:dev"
}

runClient {
    jvmArgs "-Xmx4096m", "-Xms1024m"
}

runServer {
    jvmArgs "-Xmx4096m", "-Xms1024m"
}

processResources
{
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}


sourceSets.main.java.srcDir "$buildDir/generated-source/java"

task wrapper(type: Wrapper) {
    gradleVersion = '3.5.1'
}

sourceSets {
    main {
        output.resourcesDir = output.classesDir
    }
}

if (!hasProperty("gregtechMavenUsername")) {
    ext.mavenUsername="${System.getenv().MAVEN_USERNAME}"
}

if (!hasProperty("gregtechMavenPassword")) {
    ext.mavenPassword="${System.getenv().MAVEN_PASSWORD}"
}

if (!hasProperty("gregtechMavenURL")) {
    ext.mavenURL="${System.getenv().MAVEN_URL}"
}
